{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Overview","text":"Amazon Bedrock | Amazon SageMaker | Amazon EKS | Amazon EC2 <p>A key challenge with FMs is the ability to benchmark their performance in terms of inference latency, throughput and cost so as to determine which model running with what combination of the hardware and serving stack provides the best price-performance combination for a given workload.</p> <p>Stated as business problem, the ask is \u201cWhat is the dollar cost per transaction for a given generative AI workload that serves a given number of users while keeping the response time under a target threshold?\u201d</p> <p>But to really answer this question, we need to answer an engineering question (an optimization problem, actually) corresponding to this business problem: \u201cWhat is the minimum number of instances N, of most cost optimal instance type T, that are needed to serve a workload W while keeping the average transaction latency under L seconds?\u201d</p> <p>W: = {R transactions per-minute, average prompt token length P, average generation token length G}</p> <p>This foundation model benchmarking tool (a.k.a. <code>FMBench</code>) is a tool to answer the above engineering question and thus answer the original business question about how to get the best price performance for a given workload. Here is one of the plots generated by <code>FMBench</code> to help answer the above question (the instance types in the legend have been blurred out on purpose, you can find them in the actual plot generated on running <code>FMBench</code>).</p> <p></p>"},{"location":"benchmarking.html","title":"Benchmark models","text":""},{"location":"benchmarking.html#benchmark-models-deployed-on-different-aws-generative-ai-services","title":"Benchmark models deployed on different AWS Generative AI services","text":"<p><code>FMBench</code> comes packaged with configuration files for benchmarking models on different AWS Generative AI services.</p>"},{"location":"benchmarking.html#benchmark-models-on-bedrock","title":"Benchmark models on Bedrock","text":"<p>Choose any config file from the <code>bedrock</code> folder and either run these directly or use them as templates for creating new config files specific to your use-case. Here is an example for benchmarking the <code>Llama3</code> models on Bedrock.</p> <pre><code>fmbench --config-file https://raw.githubusercontent.com/aws-samples/foundation-model-benchmarking-tool/main/src/fmbench/configs/bedrock/config-bedrock-llama3.yml &gt; fmbench.log 2&gt;&amp;1\n</code></pre>"},{"location":"benchmarking.html#benchmark-models-on-sagemaker","title":"Benchmark models on SageMaker","text":"<p>Choose any config file from the model specific folders, for example the <code>Llama3</code> folder for <code>Llama3</code> family of models. These configuration files also include instructions for <code>FMBench</code> to first deploy the model on SageMaker using your configured instance type and inference parameters of choice and then run the benchmarking. Here is an example for benchmarking <code>Llama3-8b</code> model on an <code>ml.inf2.24xlarge</code> and <code>ml.g5.12xlarge</code> instance. </p> <pre><code>fmbench --config-file https://raw.githubusercontent.com/aws-samples/foundation-model-benchmarking-tool/main/src/fmbench/configs/llama3/8b/config-llama3-8b-inf2-g5.yml &gt; fmbench.log 2&gt;&amp;1\n</code></pre>"},{"location":"benchmarking.html#benchmark-models-on-eks","title":"Benchmark models on EKS","text":"<p>You can use <code>FMBench</code> to benchmark models on hosted on EKS. This can be done in one of two ways:  - Deploy the model on your EKS cluster independantly of <code>FMBench</code> and then benchmark it through the Bring your own endpoint mode.  - Deploy the model on your EKS cluster through <code>FMBench</code> and then benchmark it.</p> <p>The steps for deploying the model on your EKS cluster are described below.</p> <p>\ud83d\udc49 EKS cluster creation itself is not a part of the <code>FMBench</code> functionality, the cluster needs to exist before you run the following steps. Steps for cluster creation are provided in this file but it would be best to consult the DoEKS repo on GitHub for comprehensive instructions.</p> <ol> <li> <p>Add the following IAM policies to your existing <code>FMBench</code> Role:</p> <ol> <li> <p>AmazonEKSClusterPolicy: This policy provides Kubernetes the permissions it requires to manage resources on your behalf.</p> </li> <li> <p>AmazonEKS_CNI_Policy: This policy provides the Amazon VPC CNI Plugin (amazon-vpc-cni-k8s) the permissions it requires to modify the IP address configuration on your EKS worker nodes. This permission set allows the CNI to list, describe, and modify Elastic Network Interfaces on your behalf.</p> </li> <li> <p>AmazonEKSWorkerNodePolicy: This policy allows Amazon EKS worker nodes to connect to Amazon EKS Clusters.</p> </li> </ol> </li> <li> <p>Once the EKS cluster is available you can use either the following two files or create your own config files using these files as examples for running benchmarking for these models. These config files require that the EKS cluster has been created as per the steps in these instructions.</p> <ol> <li> <p>config-llama3-8b-eks-inf2.yml: Deploy Llama3 on Trn1/Inf2 instances.</p> </li> <li> <p>config-mistral-7b-eks-inf2.yml: Deploy Mistral 7b on Trn1/Inf2 instances.</p> </li> </ol> <p>For more information about the blueprints used by FMBench to deploy these models, view: DoEKS docs gen-ai.</p> </li> <li> <p>Run the <code>Llama3-8b</code> benchmarking using the command below (replace the config file as needed for a different model). This will first deploy the model on your EKS cluster and then run benchmarking on the deployed model.</p> <p><code>{.bash} fmbench --config-file https://raw.githubusercontent.com/aws-samples/foundation-model-benchmarking-tool/main/src/fmbench/configs/llama3/8b/config-llama3-8b-eks-inf2.yml &gt; fmbench.log 2&gt;&amp;1</code></p> </li> <li> <p>As the model is getting deployed you might want to run the following <code>kubectl</code> commands to monitor the deployment progress. Set the model_namespace to <code>llama3</code> or <code>mistral</code> or a different model as appropriate.</p> <ol> <li><code>kubectl get pods -n &lt;model_namespace&gt; -w</code>: Watch the pods in the model specific namespace.</li> <li><code>kubectl -n karpenter get pods</code>: Get the pods in the karpenter namespace.</li> <li><code>kubectl describe pod -n &lt;model_namespace&gt; &lt;pod-name&gt;</code>: Describe a specific pod in the mistral namespace to view the live logs.</li> </ol> </li> </ol>"},{"location":"benchmarking.html#benchmark-models-on-ec2","title":"Benchmark models on EC2","text":"<p>You can use <code>FMBench</code> to benchmark models on hosted on EC2. This can be done in one of two ways:  - Deploy the model on your EC2 instance independantly of <code>FMBench</code> and then benchmark it through the Bring your own endpoint mode.  - Deploy the model on your EC2 instance through <code>FMBench</code> and then benchmark it.</p> <p>The steps for deploying the model on your EC2 instance are described below. </p> <p>\ud83d\udc49 In this configuration both the model being benchmarked and <code>FMBench</code> are deployed on the same EC2 instance.</p> <ol> <li> <p>Create a new EC2 instance suitable for hosting an LMI as per the steps described here.</p> </li> <li> <p>Install <code>FMBench</code> on this instance and run benchmarking for a desired model using one of the config files included in the <code>FMbench</code> repo or create your own.</p> <ol> <li> <p>Connect to your instance using any of the options in EC2 (SSH/EC2 Connect), run the following in the EC2 terminal. This command installs Anaconda on the instance which is then used to create a new <code>conda</code> environment for <code>FMBench</code>.</p> <p>```{.bash}</p> </li> <li> <p>Setup the <code>fmbench_python311</code> conda environment.</p> <p><code>{.bash} conda create --name fmbench_python311 -y python=3.11 ipykernel source activate fmbench_python311; pip install -U fmbench</code></p> </li> <li> <p>Create local directory structure needed for <code>FMBench</code> and copy all publicly available dependencies from the AWS S3 bucket for <code>FMBench</code>. This is done by running the <code>copy_s3_content.sh</code> script available as part of the <code>FMBench</code> repo.</p> <p><code>{.bash} curl -s https://raw.githubusercontent.com/aws-samples/foundation-model-benchmarking-tool/main/copy_s3_content.sh | sh</code></p> </li> <li> <p>To download the model files from HuggingFace, create a <code>hf_token.txt</code> file in the <code>/tmp/fmbench-read/scripts/</code> directory containing the Hugging Face token you would like to use. In the command below replace the <code>hf_yourtokenstring</code> with your hugging Face token.</p> <p><code>{.bash} echo hf_yourtokenstring &gt; /tmp/fmbench-read/scripts/hf_token.txt</code></p> </li> <li> <p>Run <code>FMBench</code> with a packaged or a custom config file. This step will also deploy the model on the EC2 instance.</p> <p>```{.bash}</p> </li> <li> <p>For example, to run <code>FMBench</code> on a <code>llama3-8b-Instruct</code> model on an <code>inf2.48xlarge</code> instance, run the command  command below. The config file for this example can be viewed here.</p> <p>```{.bash}</p> </li> <li> <p>Open a new Terminal and navigate to the <code>foundation-model-benchmarking-tool</code> directory and do a <code>tail</code> on <code>fmbench.log</code> to see a live log of the run.</p> <p><code>{.bash} tail -f fmbench.log</code></p> </li> <li> <p>All metrics are stored in the <code>/tmp/fmbench-write</code> directory created automatically by the <code>fmbench</code> package. Once the run completes all files are copied locally in a <code>results-*</code> folder as usual.</p> </li> </ol> </li> </ol>"},{"location":"benchmarking.html#see-instructions-for-downloading-anaconda-from-httpswwwanacondacomdownload","title":"see instructions for downloading anaconda from https://www.anaconda.com/download","text":"<p>curl -O https://repo.anaconda.com/archive/Anaconda3-2023.09-0-Linux-x86_64.sh chmod +x Anaconda3-2023.09-0-Linux-x86_64.sh ./Anaconda3-2023.09-0-Linux-x86_64.sh export PATH=/home/ubuntu/anaconda3/bin:$PATH ```</p>"},{"location":"benchmarking.html#the-write-bucket-parameter-value-is-just-a-placeholder-and-an-actual-s3-bucket-is-not-required","title":"the --write-bucket parameter value is just a placeholder and an actual S3 bucket is not required","text":"<p>fmbench --config-file /tmp/fmbench-read/configs/llama3/8b/config-ec2-llama3-8b.yml --local-mode yes --write-bucket placeholder &gt; fmbench.log 2&gt;&amp;1 ```</p>"},{"location":"benchmarking.html#the-write-bucket-parameter-value-is-just-a-placeholder-and-an-actual-s3-bucket-is-not-required_1","title":"the --write-bucket parameter value is just a placeholder and an actual S3 bucket is not required","text":"<p>fmbench --config-file /tmp/fmbench-read/configs/llama3/8b/config-ec2-llama3-8b-inf2-48xl.yml --local-mode yes --write-bucket placeholder &gt; fmbench.log 2&gt;&amp;1 ```</p>"},{"location":"releases.html","title":"Releases","text":""},{"location":"releases.html#models-benchmarked","title":"Models benchmarked","text":"<p>Configuration files are available in the configs folder for the following models in this repo.</p>"},{"location":"releases.html#llama3-on-amazon-sagemaker","title":"Llama3 on Amazon SageMaker","text":"<p>Llama3 is now available on SageMaker (read blog post), and you can now benchmark it using <code>FMBench</code>. Here are the config files for benchmarking <code>Llama3-8b-instruct</code> and <code>Llama3-70b-instruct</code> on <code>ml.p4d.24xlarge</code>, <code>ml.inf2.24xlarge</code> and <code>ml.g5.12xlarge</code> instances.</p> <ul> <li>Config file for <code>Llama3-8b-instruct</code> on  <code>ml.p4d.24xlarge</code> and <code>ml.g5.12xlarge</code>.</li> <li>Config file for <code>Llama3-70b-instruct</code> on  <code>ml.p4d.24xlarge</code> and <code>ml.g5.48xlarge</code>.</li> <li>Config file for <code>Llama3-8b-instruct</code> on  <code>ml.inf2.24xlarge</code> and <code>ml.g5.12xlarge</code>.</li> </ul>"},{"location":"releases.html#full-list-of-benchmarked-models","title":"Full list of benchmarked models","text":"Model SageMaker g4dn/g5/p3 SageMaker Inf2 SageMaker P4 SageMaker P5 Bedrock On-demand throughput Bedrock provisioned throughput Anthropic Claude-3 Sonnet \u2705 \u2705 Anthropic Claude-3 Haiku \u2705 Mistral-7b-instruct \u2705 \u2705 \u2705 \u2705 Mistral-7b-AWQ \u2705 Mixtral-8x7b-instruct \u2705 Llama3-8b instruct \u2705 \u2705 \u2705 \u2705 \u2705 Llama3-70b instruct \u2705 \u2705 \u2705 \u2705 Llama2-13b chat \u2705 \u2705 \u2705 \u2705 Llama2-70b chat \u2705 \u2705 \u2705 \u2705 Amazon Titan text lite \u2705 Amazon Titan text express \u2705 Cohere Command text \u2705 Cohere Command light text \u2705 AI21 J2 Mid \u2705 AI21 J2 Ultra \u2705 Gemma-2b \u2705 Phi-3-mini-4k-instruct \u2705 distilbert-base-uncased \u2705"},{"location":"releases.html#new-in-this-release","title":"New in this release","text":""},{"location":"releases.html#v1050","title":"v1.0.50","text":"<ol> <li><code>Llama3-8b</code> on Amazon EC2 <code>inf2.48xlarge</code> config file.</li> <li>Update to new version of DJL LMI (0.28.0).</li> </ol>"},{"location":"releases.html#v1049","title":"v1.0.49","text":"<ol> <li>Streaming support for Amazon SageMaker and Amazon Bedrock.</li> <li>Per-token latency metrics such as time to first token (TTFT) and mean time per-output token (TPOT).</li> <li>Misc. bug fixes.</li> </ol>"},{"location":"releases.html#v1048","title":"v1.0.48","text":"<ol> <li>Faster result file download at the end of a test run.</li> <li><code>Phi-3-mini-4k-instruct</code> configuration file.</li> <li>Tokenizer and misc. bug fixes.</li> </ol> <p>Release history</p>"}]}