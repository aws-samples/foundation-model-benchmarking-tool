general:
  name: "llama3-8b-instruct-all"      
  model_name: "llama3-8b-instruct"
  
# AWS and SageMaker settings
aws:
  region: {region}
  # uncomment and set the Role ARN if not running on sagemaker
  sagemaker_execution_role: {role_arn}
  ## these are the buckets/resources you will create in your account below:
  bucket: {write_bucket} ## add the name of your desired bucket

## WRITE BUCKET -- Write the results, data, metrics, endpoint.json and payloads to this bucket directory
dir_paths:
    data_prefix: data ## add the prefix for all your data management/storage
    prompts_prefix: prompts
    all_prompts_file: all_prompts.csv
    metrics_dir: metrics
    models_dir: models
    metadata_dir: metadata ## add a file here to dynamically track the metrics dir

## READ BUCKET -- Represents the section to read from scripts, source data and tokenizer for a separate s3 bucket for read/write segregation
s3_read_data:
    read_bucket: {read_bucket}
    scripts_prefix: scripts ## add your own scripts in case you are using anything that is not on jumpstart
    script_files:
    - hf_token.txt ## add your scripts files you have in s3 (including inference files, serving stacks, if any)
    configs_prefix: configs
    config_files:
    - pricing.yml # mention the name of the config files that you want to be downloaded from s3 into the configs directory locally
    source_data_prefix: source_data  ## Add a source_data folder to store your raw data in an s3 path configured by you
    source_data_files:
    # - rajpurkar/squad_v2.jsonl
    - 2wikimqa_e.jsonl
    - 2wikimqa.jsonl
    - hotpotqa_e.jsonl
    - hotpotqa.jsonl
    - narrativeqa.jsonl
    - triviaqa_e.jsonl
    - triviaqa.jsonl
    tokenizer_prefix: llama3_tokenizer ## add the tokenizer.json and config.json from your specific tokenizer type
    prompt_template_dir: prompt_template
    prompt_template_file: prompt_template_llama3.txt ## add your desired prompt template type

## section that enables container to run notebooks and python scripts automatically 
run_steps:
    0_setup.ipynb: yes
    1_generate_data.ipynb: yes
    2_deploy_model.ipynb: yes
    3_run_inference.ipynb: yes
    4_model_metric_analysis.ipynb: yes
    5_cleanup.ipynb: yes


datasets:
  prompt_template_keys:
  - input
  - context
  filters:
  - language: en    
    min_length_in_tokens: 1
    max_length_in_tokens: 500
    payload_file: payload_en_1-500.jsonl
  - language: en
    min_length_in_tokens: 500
    max_length_in_tokens: 1000
    payload_file: payload_en_500-1000.jsonl
  - language: en
    min_length_in_tokens: 1000
    max_length_in_tokens: 2000
    payload_file: payload_en_1000-2000.jsonl
  - language: en
    min_length_in_tokens: 2000
    max_length_in_tokens: 3000
    payload_file: payload_en_2000-3000.jsonl
  - language: en
    min_length_in_tokens: 3000
    max_length_in_tokens: 4000
    payload_file: payload_en_3000-4000.jsonl
  - language: en
    min_length_in_tokens: 3000
    max_length_in_tokens: 3840
    payload_file: payload_en_3000-3840.jsonl


metrics:
  dataset_of_interest: en_3000-3840
  
pricing: pricing.yml

inference_parameters:
  sagemaker:
    max_new_tokens: 100
    top_p: 0.92
    temperature: 0.1
    details: True
    stop: '<|eot_id|>'

experiments:
  - name: llama-3-8b-instruct-g5-2xl-djl-deepspeed0.12.6-cu121
    model_id: meta-textgeneration-llama-3-8b-instruct
    model_version: "*"
    model_name: llama3-8b-instruct-g5.2xl
    ep_name: llama-3-8b-instruct-g5-2xl
    instance_type: "ml.g5.2xlarge"
    image_uri: '763104351884.dkr.ecr.{region}.amazonaws.com/djl-inference:0.27.0-deepspeed0.12.6-cu121'
    deploy: yes
    instance_count: 1
    deployment_script: jumpstart.py
    inference_script: sagemaker_predictor.py
    inference_spec:
      parameter_set: sagemaker
    payload_files:
    - payload_en_1-500.jsonl
    - payload_en_500-1000.jsonl
    - payload_en_1000-2000.jsonl
    - payload_en_2000-3000.jsonl
    - payload_en_3000-3840.jsonl
    concurrency_levels:
    - 1
    - 2
    - 4
    - 5
    - 8
    - 10
    - 16
    - 20
    accept_eula: true    
    env:
      SAGEMAKER_PROGRAM: "inference.py"
      ENDPOINT_SERVER_TIMEOUT: "3600"
      MODEL_CACHE_ROOT: "/opt/ml/model"
      SAGEMAKER_ENV: "1"
      HF_MODEL_ID: "/opt/ml/model"
      MAX_INPUT_LENGTH: "4095"
      MAX_TOTAL_TOKENS: "4096"      
    # optional metadata about the model, this is not used for anything other than
    # just being logged in the report as is as part of the config file dump
    additional_metadata: |
      job_queue_size: 1000
      max_dynamic_batch_size: 1
      max_batch_delay: 100
      max_idle_time: 60
      load_on_devices: *
      engine: MPI
      mpi_mode: true
      option.entryPoint: null
      option.tensor_parallel_degree: 1
      option.max_rolling_batch_size: 256
      option.mpi_mode: true
      option.model_id: /opt/ml/model
      option.rolling_batch: lmi-dist

  - name: llama-3-8b-instruct-g5-48xl-djl-deepspeed0.12.6-cu121
    model_id: meta-textgeneration-llama-3-8b-instruct
    model_version: "*"
    model_name: llama3-8b-instruct-g5.48xl
    ep_name: llama-3-8b-instruct-g5-48xl
    instance_type: "ml.g5.48xlarge"
    image_uri: '763104351884.dkr.ecr.{region}.amazonaws.com/djl-inference:0.27.0-deepspeed0.12.6-cu121'
    deploy: yes
    instance_count: 1
    deployment_script: jumpstart.py
    inference_script: sagemaker_predictor.py
    inference_spec:
      parameter_set: sagemaker
    payload_files:
    - payload_en_1-500.jsonl
    - payload_en_500-1000.jsonl
    - payload_en_1000-2000.jsonl
    - payload_en_2000-3000.jsonl
    - payload_en_3000-3840.jsonl
    concurrency_levels:
    - 1
    - 2
    - 4
    - 5
    - 8
    - 10
    - 16
    - 20
    accept_eula: true
    env:
      SAGEMAKER_PROGRAM: "inference.py"
      ENDPOINT_SERVER_TIMEOUT: "3600"
      MODEL_CACHE_ROOT: "/opt/ml/model"
      SAGEMAKER_ENV: "1"
      HF_MODEL_ID: "/opt/ml/model"
      MAX_INPUT_LENGTH: "4095"
      MAX_TOTAL_TOKENS: "4096"
      SM_NUM_GPUS: "8"
      SAGEMAKER_MODEL_SERVER_WORKERS: "2"
    # optional metadata about the model, this is not used for anything other than
    # just being logged in the report as is as part of the config file dump
    additional_metadata: |
      job_queue_size: 1000
      max_dynamic_batch_size: 1
      max_batch_delay: 100
      max_idle_time: 60
      load_on_devices: *
      engine: MPI
      mpi_mode: true
      option.entryPoint: null
      option.tensor_parallel_degree: 8
      option.max_rolling_batch_size: 256
      option.mpi_mode: true
      option.model_id: /opt/ml/model
      option.rolling_batch: lmi-dist

  - name: llama-3-8b-instruct-g5-24xl-djl-deepspeed0.12.6-cu121
    model_id: meta-textgeneration-llama-3-8b-instruct
    model_version: "*"
    model_name: llama3-8b-instruct-g5.24xl
    ep_name: llama-3-8b-instruct-g5-24xl
    instance_type: "ml.g5.24xlarge"
    image_uri: '763104351884.dkr.ecr.{region}.amazonaws.com/djl-inference:0.27.0-deepspeed0.12.6-cu121'
    deploy: yes
    instance_count: 1
    deployment_script: jumpstart.py
    inference_script: sagemaker_predictor.py
    inference_spec:
      parameter_set: sagemaker
    payload_files:
    - payload_en_1-500.jsonl
    - payload_en_500-1000.jsonl
    - payload_en_1000-2000.jsonl
    - payload_en_2000-3000.jsonl
    - payload_en_3000-3840.jsonl
    concurrency_levels:
    - 1
    - 2
    - 4
    - 5
    - 8
    - 10
    - 16
    - 20
    accept_eula: true
    env:
      SAGEMAKER_PROGRAM: "inference.py"
      ENDPOINT_SERVER_TIMEOUT: "3600"
      MODEL_CACHE_ROOT: "/opt/ml/model"
      SAGEMAKER_ENV: "1"
      HF_MODEL_ID: "/opt/ml/model"
      MAX_INPUT_LENGTH: "4095"
      MAX_TOTAL_TOKENS: "4096"
    # optional metadata about the model, this is not used for anything other than
    # just being logged in the report as is as part of the config file dump
    additional_metadata: |
      job_queue_size: 1000
      max_dynamic_batch_size: 1
      max_batch_delay: 100
      max_idle_time: 60
      load_on_devices: *
      engine: MPI
      mpi_mode: true
      option.entryPoint: null
      option.tensor_parallel_degree: 4
      option.max_rolling_batch_size: 256
      option.mpi_mode: true
      option.model_id: /opt/ml/model
      option.rolling_batch: lmi-dist

  - name: llama-3-8b-instruct-g5-12xl-djl-deepspeed0.12.6-cu121
    model_id: meta-textgeneration-llama-3-8b-instruct
    model_version: "*"
    model_name: llama3-8b-instruct-g5.12xl
    ep_name: llama-3-8b-instruct-g5-12xl
    instance_type: "ml.g5.12xlarge"
    image_uri: '763104351884.dkr.ecr.{region}.amazonaws.com/djl-inference:0.27.0-deepspeed0.12.6-cu121'
    deploy: yes
    instance_count: 1
    deployment_script: jumpstart.py
    inference_script: sagemaker_predictor.py
    inference_spec:
      parameter_set: sagemaker
    payload_files:
    - payload_en_1-500.jsonl
    - payload_en_500-1000.jsonl
    - payload_en_1000-2000.jsonl
    - payload_en_2000-3000.jsonl
    - payload_en_3000-3840.jsonl
    concurrency_levels:
    - 1
    - 2
    - 4
    - 5
    - 8
    - 10
    - 15
    - 20
    accept_eula: true
    env:
      SAGEMAKER_PROGRAM: "inference.py"
      ENDPOINT_SERVER_TIMEOUT: "3600"
      MODEL_CACHE_ROOT: "/opt/ml/model"
      SAGEMAKER_ENV: "1"
      HF_MODEL_ID: "/opt/ml/model"
      MAX_INPUT_LENGTH: "4095"
      MAX_TOTAL_TOKENS: "4096"
    # optional metadata about the model, this is not used for anything other than
    # just being logged in the report as is as part of the config file dump
    additional_metadata: |
      job_queue_size: 1000
      max_dynamic_batch_size: 1
      max_batch_delay: 100
      max_idle_time: 60
      load_on_devices: *
      engine: MPI
      mpi_mode: true
      option.entryPoint: null
      option.tensor_parallel_degree: 4
      option.max_rolling_batch_size: 256
      option.mpi_mode: true
      option.model_id: /opt/ml/model
      option.rolling_batch: lmi-dist
  - name: llama-3-8b-instruct-p4d-djl-deepspeed0.12.6-cu121
    model_id: meta-textgeneration-llama-3-8b-instruct
    model_version: "*"
    model_name: llama3-8b-instruct
    ep_name: llama-3-8b-instruct-p4d
    instance_type: "ml.p4d.24xlarge"
    image_uri: '763104351884.dkr.ecr.{region}.amazonaws.com/djl-inference:0.27.0-deepspeed0.12.6-cu121'
    deploy: yes
    instance_count: 1
    deployment_script: jumpstart.py
    inference_script: sagemaker_predictor.py
    inference_spec:
      parameter_set: sagemaker
    payload_files:
    - payload_en_1-500.jsonl
    - payload_en_500-1000.jsonl
    - payload_en_1000-2000.jsonl
    - payload_en_2000-3000.jsonl
    - payload_en_3000-3840.jsonl
    concurrency_levels:
    - 1
    - 2
    - 4
    - 6
    - 8
    - 10
    - 15
    - 20

    accept_eula: true
    # optional metadata about the model, this is not used for anything other than
    # just being logged in the report as is as part of the config file dump
    additional_metadata: |
      job_queue_size: 1000
      max_dynamic_batch_size: 1
      max_batch_delay: 100
      max_idle_time: 60
      load_on_devices: *
      engine: MPI
      mpi_mode: true
      option.entryPoint: null
      option.tensor_parallel_degree: 8
      option.max_rolling_batch_size: 256
      option.mpi_mode: true
      option.model_id: /opt/ml/model
      option.rolling_batch: lmi-dist
    env:
      SAGEMAKER_PROGRAM: "inference.py"
      ENDPOINT_SERVER_TIMEOUT: "3600"
      MODEL_CACHE_ROOT: "/opt/ml/model"
      SAGEMAKER_ENV: "1"
      HF_MODEL_ID: "/opt/ml/model"
      MAX_INPUT_LENGTH: "4095"
      MAX_TOTAL_TOKENS: "4096"
      # SM_NUM_GPUS: "1"
      # SAGEMAKER_MODEL_SERVER_WORKERS: "1"
  - name: llama-3-8b-instruct-trn1-32xl-djl-inference:0.27.0-neuronx-sdk2.18.1
    # model_id is interpreted in conjunction with the deployment_script, so if you
    # use a JumpStart model id then set the deployment_script to jumpstart.py.
    # if deploying directly from HuggingFace this would be a HuggingFace model id
    # see the DJL serving deployment script in the code repo for reference.  
    model_id: llama-3-8b-instruct
    model_version:
    model_name: llama3-8b-trn1.32xl
    ep_name: "<your-endpoint-name>"
    instance_type: "ml.trn1.32xlarge"
    image_uri: 
    deploy: no
    instance_count: 1
    # FMBench comes packaged with multiple deployment scripts, such as scripts for JumpStart
    # scripts for deploying using DJL DeepSpeed, tensorRT etc. You can also add your own.
    # See repo for details
    deployment_script: 
    # FMBench comes packaged with multiple inference scripts, such as scripts for SageMaker
    # and Bedrock. You can also add your own. See repo for details
    inference_script: sagemaker_predictor.py
    inference_spec:
      # this should match one of the sections in the inference_parameters section above
      parameter_set: sagemaker
    # runs are done for each combination of payload file and concurrency level
    payload_files:
    - payload_en_1-500.jsonl
    - payload_en_500-1000.jsonl
    - payload_en_1000-2000.jsonl
    - payload_en_2000-3000.jsonl
    - payload_en_3000-3840.jsonl
    # concurrency level refers to number of requests sent in parallel to an endpoint
    # the next set of requests is sent once responses for all concurrent requests have
    # been received.
    # currently the llama3-8b jumpstart model is compiled with a batch size of 1
    concurrency_levels:
    - 1
    - 2
    - 4
    - 8
    - 10
    - 15
    - 20

    accept_eula: true
    # Environment variables to be passed to the container
    # this is not a fixed list, you can add more parameters as applicable.
    env:
    # optional metadata about the model, this is not used for anything other than
    # just being logged in the report as is as part of the config file dump
    additional_metadata: |
      model_id_or_path='/tmp/.djl.ai/download/ae03dd100c208acd82b5dbed563c971de864c408'
      rolling_batch=<RollingBatchEnum.auto: 'auto'>
      tensor_parallel_degree=8
      trust_remote_code=False
      enable_streaming=<StreamingEnum.false: 'false'>
      batch_size=4
      max_rolling_batch_size=4
      dtype=<Dtype.f16: 'fp16'>
      revision=None
      output_formatter=None
      waiting_steps=None
      is_mpi=False
      draft_model_id=None
      spec_length=0
      neuron_optimize_level=None
      enable_mixed_precision_accumulation=False
      enable_saturate_infinity=False
      n_positions=4096
      unroll=None
      load_in_8bit=False
      low_cpu_mem_usage=False
      load_split_model=True
      context_length_estimate=None
      amp='f16'
      quantize=None
      compiled_graph_path=None
      task=None
      save_mp_checkpoint_path=None
      group_query_attention=None
      model_loader=<TnXModelLoaders.tnx: 'tnx'>
      rolling_batch_strategy=<TnXGenerationStrategy.continuous_batching: 'continuous_batching'>
      fuse_qkv=False
      on_device_embedding=False
      attention_layout=None
      collectives_layout=None
      cache_layout=None
      partition_schema=None
      all_reduce_dtype=None
      cast_logits_dtype=None
  - name: llama-3-8b-instruct-inf2-48xl-djl-inference:0.27.0-neuronx-sdk2.18.1
    # model_id is interpreted in conjunction with the deployment_script, so if you
    # use a JumpStart model id then set the deployment_script to jumpstart.py.
    # if deploying directly from HuggingFace this would be a HuggingFace model id
    # see the DJL serving deployment script in the code repo for reference.  
    model_id: llama-3-8b-instruct
    model_version:
    model_name: llama3-8b-inf2.24xl
    ep_name: "<your-endpoint-name>"
    instance_type: "ml.inf2.48xlarge"
    image_uri: 
    deploy: no
    instance_count: 1
    # FMBench comes packaged with multiple deployment scripts, such as scripts for JumpStart
    # scripts for deploying using DJL DeepSpeed, tensorRT etc. You can also add your own.
    # See repo for details
    deployment_script: 
    # FMBench comes packaged with multiple inference scripts, such as scripts for SageMaker
    # and Bedrock. You can also add your own. See repo for details
    inference_script: sagemaker_predictor.py
    inference_spec:
      # this should match one of the sections in the inference_parameters section above
      parameter_set: sagemaker
    # runs are done for each combination of payload file and concurrency level
    payload_files:
    - payload_en_1-500.jsonl
    - payload_en_500-1000.jsonl
    - payload_en_1000-2000.jsonl
    - payload_en_2000-3000.jsonl
    - payload_en_3000-3840.jsonl
    # concurrency level refers to number of requests sent in parallel to an endpoint
    # the next set of requests is sent once responses for all concurrent requests have
    # been received.
    # currently the llama3-8b jumpstart model is compiled with a batch size of 1
    concurrency_levels:
    - 1
    - 2
    - 4
    - 8
    - 10
    - 15
    - 20

    accept_eula: true
    # Environment variables to be passed to the container
    # this is not a fixed list, you can add more parameters as applicable.
    env:
    # optional metadata about the model, this is not used for anything other than
    # just being logged in the report as is as part of the config file dump
    additional_metadata: |
      model_id_or_path='/tmp/.djl.ai/download/ae03dd100c208acd82b5dbed563c971de864c408'
      rolling_batch=<RollingBatchEnum.auto: 'auto'>
      tensor_parallel_degree=8
      trust_remote_code=False
      enable_streaming=<StreamingEnum.false: 'false'>
      batch_size=4
      max_rolling_batch_size=4
      dtype=<Dtype.f16: 'fp16'>
      revision=None
      output_formatter=None
      waiting_steps=None
      is_mpi=False
      draft_model_id=None
      spec_length=0
      neuron_optimize_level=None
      enable_mixed_precision_accumulation=False
      enable_saturate_infinity=False
      n_positions=4096
      unroll=None
      load_in_8bit=False
      low_cpu_mem_usage=False
      load_split_model=True
      context_length_estimate=None
      amp='f16'
      quantize=None
      compiled_graph_path=None
      task=None
      save_mp_checkpoint_path=None
      group_query_attention=None
      model_loader=<TnXModelLoaders.tnx: 'tnx'>
      rolling_batch_strategy=<TnXGenerationStrategy.continuous_batching: 'continuous_batching'>
      fuse_qkv=False
      on_device_embedding=False
      attention_layout=None
      collectives_layout=None
      cache_layout=None
      partition_schema=None
      all_reduce_dtype=None
      cast_logits_dtype=None

  - name: llama-3-8b-instruct-inf2-24xl-djl-inference:0.27.0-neuronx-sdk2.18.1
    # model_id is interpreted in conjunction with the deployment_script, so if you
    # use a JumpStart model id then set the deployment_script to jumpstart.py.
    # if deploying directly from HuggingFace this would be a HuggingFace model id
    # see the DJL serving deployment script in the code repo for reference.  
    model_id: llama-3-8b-instruct
    model_version:
    model_name: llama3-8b-inf2.24xl
    ep_name: "<your-endpoint-name>"
    instance_type: "ml.inf2.24xlarge"
    image_uri: 
    deploy: no
    instance_count: 1
    # FMBench comes packaged with multiple deployment scripts, such as scripts for JumpStart
    # scripts for deploying using DJL DeepSpeed, tensorRT etc. You can also add your own.
    # See repo for details
    deployment_script: 
    # FMBench comes packaged with multiple inference scripts, such as scripts for SageMaker
    # and Bedrock. You can also add your own. See repo for details
    inference_script: sagemaker_predictor.py
    inference_spec:
      # this should match one of the sections in the inference_parameters section above
      parameter_set: sagemaker
    # runs are done for each combination of payload file and concurrency level
    payload_files:
    - payload_en_1-500.jsonl
    - payload_en_500-1000.jsonl
    - payload_en_1000-2000.jsonl
    - payload_en_2000-3000.jsonl
    - payload_en_3000-3840.jsonl
    # concurrency level refers to number of requests sent in parallel to an endpoint
    # the next set of requests is sent once responses for all concurrent requests have
    # been received.
    # currently the llama3-8b jumpstart model is compiled with a batch size of 1
    concurrency_levels:
    - 1
    - 2
    - 4
    - 6
    - 8
    - 10
    - 15
    - 20

    accept_eula: true
    # Environment variables to be passed to the container
    # this is not a fixed list, you can add more parameters as applicable.
    env:
    # optional metadata about the model, this is not used for anything other than
    # just being logged in the report as is as part of the config file dump
    additional_metadata: |
      model_id_or_path='/tmp/.djl.ai/download/ae03dd100c208acd82b5dbed563c971de864c408'
      rolling_batch=<RollingBatchEnum.auto: 'auto'>
      tensor_parallel_degree=8
      trust_remote_code=False
      enable_streaming=<StreamingEnum.false: 'false'>
      batch_size=4
      max_rolling_batch_size=4
      dtype=<Dtype.f16: 'fp16'>
      revision=None
      output_formatter=None
      waiting_steps=None
      is_mpi=False
      draft_model_id=None
      spec_length=0
      neuron_optimize_level=None
      enable_mixed_precision_accumulation=False
      enable_saturate_infinity=False
      n_positions=4096
      unroll=None
      load_in_8bit=False
      low_cpu_mem_usage=False
      load_split_model=True
      context_length_estimate=None
      amp='f16'
      quantize=None
      compiled_graph_path=None
      task=None
      save_mp_checkpoint_path=None
      group_query_attention=None
      model_loader=<TnXModelLoaders.tnx: 'tnx'>
      rolling_batch_strategy=<TnXGenerationStrategy.continuous_batching: 'continuous_batching'>
      fuse_qkv=False
      on_device_embedding=False
      attention_layout=None
      collectives_layout=None
      cache_layout=None
      partition_schema=None
      all_reduce_dtype=None
      cast_logits_dtype=None
report:
  latency_budget: 2
  cost_per_10k_txn_budget: 20
  error_rate_budget: 0
  per_inference_request_file: per_inference_request_results.csv
  all_metrics_file: all_metrics.csv
  txn_count_for_showing_cost: 10000
  v_shift_w_single_instance: 0.025
  v_shift_w_gt_one_instance: 0.025
