general:
  name: "fmbench-bedrock-latest-models"      
  model_name: "All latest models available in Amazon Bedrock"
  
# AWS and SageMaker settings
aws:
  # AWS region, this parameter is templatized, no need to change
  region: {region}
  # SageMaker execution role used to run FMBench, this parameter is templatized, no need to change
  sagemaker_execution_role: {role_arn}
  # S3 bucket to which metrics, plots and reports would be written to
  bucket: {write_bucket} ## add the name of your desired bucket

# directory paths in the write bucket, no need to change these
dir_paths:
  data_prefix: data
  prompts_prefix: prompts
  all_prompts_file: all_prompts.csv
  metrics_dir: metrics
  models_dir: models
  metadata_dir: metadata

## S3 information for reading datasets, scripts and tokenizer
s3_read_data:
  # read bucket name, templatized, if left unchanged will default to sagemaker-fmbench-read-<region>-<account_id>
  read_bucket: {read_bucket}

  # S3 prefix in the read bucket where deployment and inference scripts should be placed
  scripts_prefix: scripts
  
  # deployment and inference script files to be downloaded are placed in this list
  # only needed if you are creating a new deployment script or inference script
  # your HuggingFace token does need to be in this list and should be called "hf_token.txt"
  script_files:
  - hf_token.txt
  
  # configuration files (like this one) are placed in this prefix
  configs_prefix: configs

  # list of configuration files to download, for now only pricing.yml needs to be downloaded
  config_files:
  - pricing.yml

  # S3 prefix for the dataset files
  source_data_prefix: source_data
  # list of dataset files, the list below is from the LongBench dataset https://huggingface.co/datasets/THUDM/LongBench
  source_data_files:
  - Open-Orca/OpenOrca.jsonl
  tokenizer_prefix: tokenizer ## add the tokenizer.json and config.json from your specific tokenizer type
  prompt_template_dir: prompt_template
  prompt_template_file: prompt_template_claude_OpenOrca.txt ## add your desired prompt template type

# steps to run, usually all of these would be
# set to yes so nothing needs to change here
# you could, however, bypass some steps for example
# set the 2_deploy_model.ipynb to no if you are re-running
# the same config file and the model is already deployed
run_steps:
  0_setup.ipynb: yes
  1_generate_data.ipynb: no
  2_deploy_model.ipynb: no
  3_run_inference.ipynb: no
  4_get_evaluations.ipynb: no
  5_model_metric_analysis.ipynb: yes
  6_cleanup.ipynb: no

datasets:
  # dataset related configuration
  prompt_template_keys:
  - input
  - system_prompt  
  ground_truth_col_key: response
  question_col_key: input
  filters:
  - language: en    
    min_length_in_tokens: 1
    max_length_in_tokens: 500
    payload_file: payload_en_1-500.jsonl
  - language: en
    min_length_in_tokens: 500
    max_length_in_tokens: 1000
    payload_file: payload_en_500-1000.jsonl
  - language: en
    min_length_in_tokens: 1000
    max_length_in_tokens: 2000
    payload_file: payload_en_1000-2000.jsonl
  - language: en
    min_length_in_tokens: 2000
    max_length_in_tokens: 3000
    payload_file: payload_en_2000-3000.jsonl
  - language: en
    min_length_in_tokens: 3000
    max_length_in_tokens: 4000
    payload_file: payload_en_3000-4000.jsonl
  - language: en
    min_length_in_tokens: 305
    max_length_in_tokens: 3997
    payload_file: payload_en_305-3997.jsonl

# name of the file that contains the model evaluation information
# for example, the prompt template names, the ground truth column name (if any), 
# LLM panelist information, inference parameters, etc.
model_evaluations: model_eval_all_info.yml


metrics:
  dataset_of_interest: en_1000-2000


pricing: pricing.yml ## mention the name of the file that contains pricing information, within s3 or locally in the configs folder
  
inference_parameters: 
  bedrock:
    temperature: 0.1
    max_tokens: 100
    top_p: 0.92
    caching: False

# Model configurations for mistral 7b instruct on Amazon Bedrock
experiments:
  # Experiment for claude 3 sonnet
  - name: anthropic.claude-3-sonnet-20240229-v1:0
    model_name: anthropic.claude-3-sonnet-20240229-v1:0
    ep_name: anthropic.claude-3-sonnet-20240229-v1:0
    instance_type: anthropic.claude-3-sonnet-20240229-v1:0
    instance_count:
    inference_script: bedrock_predictor.py
    inference_spec:
      split_input_and_parameters: no
      parameter_set: bedrock
    payload_files:
    - payload_en_1-500.jsonl
    - payload_en_500-1000.jsonl
    - payload_en_1000-2000.jsonl
    - payload_en_2000-3000.jsonl
    - payload_en_3000-4000.jsonl
    concurrency_levels:
    - 1
    - 2
    - 4
    - 6
    - 8
    - 10
    env:
  # Experiment for claude 3 haiku
  - name: anthropic.claude-3-haiku-20240307-v1:0
    model_name: anthropic.claude-3-haiku-20240307-v1:0
    ep_name: anthropic.claude-3-haiku-20240307-v1:0
    instance_type: anthropic.claude-3-haiku-20240307-v1:0
    instance_count:
    inference_script: bedrock_predictor.py
    inference_spec:
      split_input_and_parameters: no
      parameter_set: bedrock
    payload_files:
    - payload_en_1-500.jsonl
    - payload_en_500-1000.jsonl
    - payload_en_1000-2000.jsonl
    - payload_en_2000-3000.jsonl
    - payload_en_3000-4000.jsonl
    concurrency_levels:
    - 1
    - 2
    - 4
    - 6
    - 8
    - 10
    env:
  - name: mistral.mistral-7b-instruct-v0:2
    model_id: mistral.mistral-7b-instruct-v0:2
    model_version: "*"
    model_name: mistral.mistral-7b-instruct-v0:2
    ep_name: mistral.mistral-7b-instruct-v0:2
    instance_type: mistral.mistral-7b-instruct-v0:2
    image_uri:
    deploy: no
    instance_count: 1
    deployment_script:
    inference_script: bedrock_predictor.py
    inference_spec:
      split_input_and_parameters: no
      parameter_set: bedrock
      stream: True
    payload_files:
    - payload_en_1-500.jsonl
    - payload_en_500-1000.jsonl
    - payload_en_1000-2000.jsonl
    - payload_en_2000-3000.jsonl
    - payload_en_3000-3840.jsonl
    concurrency_levels:
    - 1
    - 2
    - 4
    - 6
    - 8
    - 10
    env:
  - name: mistral.mixtral-8x7b-instruct-v0:1
    model_id: mistral.mixtral-8x7b-instruct-v0:1
    model_version: "*"
    model_name: mistral.mixtral-8x7b-instruct-v0:1
    ep_name: mistral.mixtral-8x7b-instruct-v0:1
    instance_type: mistral.mixtral-8x7b-instruct-v0:1
    image_uri:
    deploy: no
    instance_count: 1
    deployment_script:
    inference_script: bedrock_predictor.py
    inference_spec:
      split_input_and_parameters: no
      parameter_set: bedrock
    payload_files:
    - payload_en_1-500.jsonl
    - payload_en_500-1000.jsonl
    - payload_en_1000-2000.jsonl
    - payload_en_2000-3000.jsonl
    - payload_en_3000-3840.jsonl
    concurrency_levels:
    - 1
    - 2
    - 4
    - 6
    - 8
    - 10
    env:
  - name: meta.llama3-70b-instruct-v1:0
    # model_id is interpreted in conjunction with the deployment_script, so if you
    # use a JumpStart model id then set the deployment_script to jumpstart.py.
    # if deploying directly from HuggingFace this would be a HuggingFace model id
    # see the DJL serving deployment script in the code repo for reference.    
    model_id: meta.llama3-70b-instruct-v1:0
    model_version: 
    model_name: meta.llama3-70b-instruct-v1:0
    ep_name: meta.llama3-70b-instruct-v1:0
    instance_type: meta.llama3-70b-instruct-v1:0
    image_uri:
    deploy: no
    # FMBench comes packaged with multiple deployment scripts, such as scripts for JumpStart
    # scripts for deploying using DJL DeepSpeed, tensorRT etc. You can also add your own.
    # See repo for details
    instance_count:
    deployment_script:
    # FMBench comes packaged with multiple inference scripts, such as scripts for SageMaker
    # and Bedrock. You can also add your own. See repo for details
    inference_script: bedrock_predictor.py
    inference_spec:
      split_input_and_parameters: no
      # this should match one of the sections in the inference_parameters section above
      parameter_set: bedrock
      stream: True
      stop_token: "<|eot_id|>"
    # runs are done for each combination of payload file and concurrency level
    payload_files:
    - payload_en_1-500.jsonl
    - payload_en_500-1000.jsonl
    - payload_en_1000-2000.jsonl
    - payload_en_2000-3000.jsonl
    - payload_en_3000-3840.jsonl
    # concurrency level refers to number of requests sent in parallel to an endpoint
    # the next set of requests is sent once responses for all concurrent requests have
    # been received.
    concurrency_levels:
    - 1
    - 2
    - 4
    - 6
    - 8
    - 10
    # Environment variables to be passed to the container
    # this is not a fixed list, you can add more parameters as applicable.
    env:
  - name: meta.llama3-8b-instruct-v1:0
    # model_id is interpreted in conjunction with the deployment_script, so if you
    # use a JumpStart model id then set the deployment_script to jumpstart.py.
    # if deploying directly from HuggingFace this would be a HuggingFace model id
    # see the DJL serving deployment script in the code repo for reference.    
    model_id: meta.llama3-8b-instruct-v1:0
    model_version: 
    model_name: meta.llama3-8b-instruct-v1:0
    ep_name: meta.llama3-8b-instruct-v1:0
    instance_type: meta.llama3-8b-instruct-v1:0
    image_uri:
    deploy: no
    # FMBench comes packaged with multiple deployment scripts, such as scripts for JumpStart
    # scripts for deploying using DJL DeepSpeed, tensorRT etc. You can also add your own.
    # See repo for details
    instance_count:
    deployment_script:
    # FMBench comes packaged with multiple inference scripts, such as scripts for SageMaker
    # and Bedrock. You can also add your own. See repo for details
    inference_script: bedrock_predictor.py
    inference_spec:
      split_input_and_parameters: no
      # this should match one of the sections in the inference_parameters section above
      parameter_set: bedrock
      stream: True
      stop_token: "<|eot_id|>"
    # runs are done for each combination of payload file and concurrency level
    payload_files:
    - payload_en_1-500.jsonl
    - payload_en_500-1000.jsonl
    - payload_en_1000-2000.jsonl
    - payload_en_2000-3000.jsonl
    - payload_en_3000-3840.jsonl
    # concurrency level refers to number of requests sent in parallel to an endpoint
    # the next set of requests is sent once responses for all concurrent requests have
    # been received.
    concurrency_levels:
    - 1
    - 2
    - 4
    - 6
    - 8
    - 10
    # Environment variables to be passed to the container
    # this is not a fixed list, you can add more parameters as applicable.
    env:
    
report:
  latency_budget: 5
  cost_per_10k_txn_budget: 350
  error_rate_budget: 0
  # change this based on your dataset size and your needs
  accuracy_budget: 0.90
  per_inference_request_file: per_inference_request_results.csv
  all_metrics_file: all_metrics.csv
  txn_count_for_showing_cost: 10000
  v_shift_w_single_instance: 0.025
  v_shift_w_gt_one_instance: 0.025
