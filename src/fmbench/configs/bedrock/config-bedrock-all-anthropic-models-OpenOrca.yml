general:
  name: "fmbench-bedrock-anthropic-models"      
  model_name: "All anthropic models available in Amazon Bedrock"
  
# AWS and SageMaker settings
aws:
  # AWS region, this parameter is templatized, no need to change
  region: {region}
  # SageMaker execution role used to run FMBench, this parameter is templatized, no need to change
  sagemaker_execution_role: {role_arn}
  # S3 bucket to which metrics, plots and reports would be written to
  bucket: {write_bucket} ## add the name of your desired bucket

# directory paths in the write bucket, no need to change these
dir_paths:
  data_prefix: data
  prompts_prefix: prompts
  all_prompts_file: all_prompts.csv
  metrics_dir: metrics
  models_dir: models
  metadata_dir: metadata

## S3 information for reading datasets, scripts and tokenizer
s3_read_data:
  # read bucket name, templatized, if left unchanged will default to sagemaker-fmbench-read-<region>-<account_id>
  read_bucket: {read_bucket}

  # S3 prefix in the read bucket where deployment and inference scripts should be placed
  scripts_prefix: scripts
  
  # deployment and inference script files to be downloaded are placed in this list
  # only needed if you are creating a new deployment script or inference script
  # your HuggingFace token does need to be in this list and should be called "hf_token.txt"
  script_files:
  - hf_token.txt
  
  # This is the directory in S3 and locally where all the rules are stored. Each rule 
  # file represents a subjective criteria to be evaluated
  eval_prompts_dir: eval_criteria
  # the directory contains a folder that contains all the files with rules for evaluations
  # and another directory that stores the standard prompt template that is used for evlauation
  # of different answers at runtime
  eval_prompt_template_dir_list:
  - claude_eval_prompt_templates
  - llama3_eval_prompt_templates
  - cohere_eval_prompt_templates
  
  # These are the rules that are prefilled within the 
  # prompt templates evaluating for max voting or average
  # pooling
  eval_instructions_dir: eval_instructions
  eval_instructions_files:
  - evaluation_instructions_max_voting.txt
  - evaluation_instructions_avg_pooling.txt

  # configuration files (like this one) are placed in this prefix
  configs_prefix: configs

  # list of configuration files to download, for now only pricing.yml needs to be downloaded
  config_files:
  - pricing.yml

  # S3 prefix for the dataset files
  source_data_prefix: source_data
  # list of dataset files, the list below is from the LongBench dataset https://huggingface.co/datasets/THUDM/LongBench
  source_data_files:
  - Open-Orca/OpenOrca.jsonl
  tokenizer_prefix: tokenizer ## add the tokenizer.json and config.json from your specific tokenizer type
  prompt_template_dir: prompt_template
  prompt_template_file: prompt_template_claude_OpenOrca.txt ## add your desired prompt template type

# steps to run, usually all of these would be
# set to yes so nothing needs to change here
# you could, however, bypass some steps for example
# set the 2_deploy_model.ipynb to no if you are re-running
# the same config file and the model is already deployed
run_steps:
  0_setup.ipynb: yes
  1_generate_data.ipynb: no
  2_deploy_model.ipynb: no
  3_run_inference.ipynb: no
  4_get_evaluations.ipynb: yes
  5_model_metric_analysis.ipynb: yes
  6_cleanup.ipynb: no

datasets:
  # dataset related configuration
  prompt_template_keys:
  - input
  - system_prompt  
  filters:
  - language: en    
    min_length_in_tokens: 1
    max_length_in_tokens: 500
    payload_file: payload_en_1-500.jsonl
  - language: en
    min_length_in_tokens: 500
    max_length_in_tokens: 1000
    payload_file: payload_en_500-1000.jsonl
  - language: en
    min_length_in_tokens: 1000
    max_length_in_tokens: 2000
    payload_file: payload_en_1000-2000.jsonl
  - language: en
    min_length_in_tokens: 2000
    max_length_in_tokens: 3000
    payload_file: payload_en_2000-3000.jsonl
  - language: en
    min_length_in_tokens: 3000
    max_length_in_tokens: 4000
    payload_file: payload_en_3000-4000.jsonl
  - language: en
    min_length_in_tokens: 305
    max_length_in_tokens: 3997
    payload_file: payload_en_305-3997.jsonl

# name of the file that contains the model evaluation information
# change to model_eval_avg pooling for average pooling use cases
model_evaluations: model_eval_all_info.yml

# We construct a PoLL from a panel of LLM judges being drawn from disparate model families. We consider two
# different voting functions for aggregating scores across the judges. For tasks where ground truth is provided, we use
# max voting, as all judgements are binary [correct, incorrect]. For Chatbot Arena we instead use average 
# pooling because judgements are scores ranging from 1-5 and a three judge panel often does not produce 
# a clear majority decision
PoLL_Composition_and_Voting: 
  # If you are looking to evaluate the model responses 
  # to corresponding sources of ground truth, then FMBench 
  # can use the max_voting method to get binary decisions and do a
  # majority vote from all panel judges on each model used in the inference
  # process. If you want your evaluations to be more tailored to specific criteria
  # and not a binary decision then use "avg_pooling" here
  method: avg_pooling # [avg_pooling, max_voting]
  # Enter the column name of your dataset that contains the ground truth if any. 
  # If there is no ground truth provided, leave this empty.
  ground_truth_col: response # the ground truth column for the OpenOrca dataset is "response"
  # Set this variable to yes if you want to make partial correct/incorrect decisions based
  # on quantitative metrics like cosine similarity, levenshtein score and token set ratio. Set
  # this to yes only if you have a very direct QnA use case
  use_quantitative_metrics: no
  # these are the rules that are used to evaluate all of the candidate models.
  # these txt files are fit into the prompts for the Panel of LLM evaluators
  # while evaluating the candidate model responses.
  subjective_eval_criteria:
    accuracy: | 
        This criteria is for accuracy:
        1. Factual Correctness: The response should be factually accurate and free from errors or misinformation. It should align with information
        from the context fully.
        2. Relevance: The response should be directly relevant to the question or task at hand. It should address the question and context without 
        deviating or including irrelevant information.
        3. Completeness: The response should provide a comprehensive answer or solution to the question or task. It should not omit crucial details or 
        leave out important aspects of the required information.
        4. Consistency: The response should be consistent with the context and any provided background information. It should not contradict 
        previously established facts or make logically inconsistent statements.
        5. Specificity: The response should be specific and tailored to the particular question or task. It should avoid overly broad or generalized statements that lack the necessary level of detail.
        6. Objectivity: The response should be objective and impartial, free from biases or subjective opinions unless explicitly requested or appropriate for the task and the question.
        7. Clarity: The response should be clear, concise, and easy to understand. It should use appropriate language and avoid ambiguity or confusion.
        8. Timeliness: If applicable, the response should be up-to-date and reflect the most recent information or developments relevant to the question 
        or task.
        9. Domain Expertise: The response should demonstrate appropriate domain knowledge and expertise relevant to the subject matter of the question 
        or task.
    helpfulness: |
        This criteria is for helpfulness:
        1. Practical Value: The response should provide information or solutions that are actionable and useful to the user.
        2. Problem-Solving: The response should effectively address the user's problem or question, offering clear guidance or solutions.
        3. Clarity of Explanation: The information should be presented in a clear, easy-to-understand manner, avoiding unnecessary jargon.
        4. Thoroughness: The response should cover all aspects of the question or task comprehensively.
        5. Relevance to User Needs: The information provided should be tailored to the specific needs or context of the user's query.
    coherence: |
        This criteria is for coherence:
        1. Logical Flow: The response should have a clear and logical structure, with ideas flowing smoothly from one to the next.
        2. Consistency: All parts of the response should be consistent with each other, without contradictions or conflicting information.
        3. Contextual Relevance: The response should maintain relevance to the overall context of the conversation or task.
        4. Proper Transitions: There should be appropriate transitions between different parts or ideas within the response.
        5. Unified Theme: The entire response should revolve around a central theme or purpose, maintaining focus throughout.
 
metrics:
  dataset_of_interest: en_1000-2000

  
pricing: pricing.yml ## mention the name of the file that contains pricing information, within s3 or locally in the configs folder
  
inference_parameters: 
  bedrock:
    temperature: 0.1
    max_tokens: 100
    top_p: 0.92
    caching: False

# Model configurations for mistral 7b instruct on Amazon Bedrock
experiments:
  # Experiment for claude 3 sonnet
  - name: anthropic.claude-3-sonnet-20240229-v1:0
    model_name: anthropic.claude-3-sonnet-20240229-v1:0
    ep_name: anthropic.claude-3-sonnet-20240229-v1:0
    instance_type: anthropic.claude-3-sonnet-20240229-v1:0
    instance_count:
    inference_script: bedrock_predictor.py
    inference_spec:
      split_input_and_parameters: no
      parameter_set: bedrock
    payload_files:
    - payload_en_1-500.jsonl
    - payload_en_500-1000.jsonl
    - payload_en_1000-2000.jsonl
    - payload_en_2000-3000.jsonl
    - payload_en_3000-4000.jsonl
    concurrency_levels:
    - 1
    # - 2
    # - 4
    # - 6
    # - 8
    # - 10
    env:
  # Experiment for claude instant
  - name: anthropic.claude-instant-v1
    model_name: anthropic.claude-instant-v1
    ep_name: anthropic.claude-instant-v1
    instance_type: anthropic.claude-instant-v1
    instance_count:
    inference_script: bedrock_predictor.py
    inference_spec:
      split_input_and_parameters: no
      parameter_set: bedrock
    payload_files:
    - payload_en_1-500.jsonl
    - payload_en_500-1000.jsonl
    - payload_en_1000-2000.jsonl
    - payload_en_2000-3000.jsonl
    - payload_en_3000-4000.jsonl
    concurrency_levels:
    - 1
    # - 2
    # - 4
    # - 6
    # - 8
    # - 10
    env:
  # Experiment for claude 3 haiku
  - name: anthropic.claude-3-haiku-20240307-v1:0
    model_name: anthropic.claude-3-haiku-20240307-v1:0
    ep_name: anthropic.claude-3-haiku-20240307-v1:0
    instance_type: anthropic.claude-3-haiku-20240307-v1:0
    instance_count:
    inference_script: bedrock_predictor.py
    inference_spec:
      split_input_and_parameters: no
      parameter_set: bedrock
    payload_files:
    - payload_en_1-500.jsonl
    - payload_en_500-1000.jsonl
    - payload_en_1000-2000.jsonl
    - payload_en_2000-3000.jsonl
    - payload_en_3000-4000.jsonl
    concurrency_levels:
    - 1
    # - 2
    # - 4
    # - 6
    # - 8
    # - 10
    env:
    
report:
  latency_budget: 5
  cost_per_10k_txn_budget: 350
  error_rate_budget: 0
  # change this based on your dataset size and your needs
  accuracy_budget: 0.90
  per_inference_request_file: per_inference_request_results.csv
  all_metrics_file: all_metrics.csv
  txn_count_for_showing_cost: 10000
  v_shift_w_single_instance: 0.025
  v_shift_w_gt_one_instance: 0.025
