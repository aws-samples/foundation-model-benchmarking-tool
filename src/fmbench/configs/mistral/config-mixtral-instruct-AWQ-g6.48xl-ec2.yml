general:
  name: "mixtral-instruct-AWQ-g6.48xl-ec2"
  model_name: "mixtral-instruct-AWQ-g6.48xl-ec2"

# AWS and SageMaker settings
aws:
  region: {region}
  # uncomment and set the Role ARN if not running on sagemaker
  sagemaker_execution_role: {role_arn}
  ## these are the buckets/resources you will create in your account below:
  bucket: {write_bucket} ## add the name of your desired bucket

## WRITE BUCKET -- Write the results, data, metrics, endpoint.json and payloads to this bucket directory
dir_paths:
    data_prefix: data ## add the prefix for all your data management/storage
    prompts_prefix: prompts
    all_prompts_file: all_prompts.csv
    metrics_dir: metrics
    models_dir: models
    metadata_dir: metadata ## add a file here to dynamically track the metrics dir

## READ BUCKET -- Represents the section to read from scripts, source data and tokenizer for a separate s3 bucket for read/write segregation
s3_read_data:
    read_bucket: {read_bucket}
    scripts_prefix: scripts ## add your own scripts in case you are using anything that is not on jumpstart
    script_files:
    - hf_token.txt  ## add your scripts files you have in s3 (including inference files, serving stacks, if any)
    configs_prefix: configs
    config_files:
    - pricing.yml
    source_data_prefix: source_data  ## Add a source_data folder to store your raw data in an s3 path configured by you
    source_data_files:
    - 2wikimqa_e.jsonl
    - 2wikimqa.jsonl
    - hotpotqa_e.jsonl
    - hotpotqa.jsonl
    - narrativeqa.jsonl
    - triviaqa_e.jsonl
    - triviaqa.jsonl
    tokenizer_prefix: mistral_tokenizer ## add the tokenizer.json and config.json from your specific tokenizer type
    prompt_template_dir: prompt_template
    prompt_template_file: prompt_template_mistral.txt ## add your desired prompt template type

## section that enables container to run notebooks and python scripts automatically 
run_steps:
    0_setup.ipynb: yes
    1_generate_data.ipynb: yes
    2_deploy_model.ipynb: yes
    3_run_inference.ipynb: yes
    4_model_metric_analysis.ipynb: yes
    5_cleanup.ipynb: yes

datasets:
  prompt_template_keys:
  - input
  - context
  filters:
  - language: en    
    min_length_in_tokens: 1
    max_length_in_tokens: 500
    payload_file: payload_en_1-500.jsonl
  - language: en
    min_length_in_tokens: 500
    max_length_in_tokens: 1000
    payload_file: payload_en_500-1000.jsonl
  - language: en
    min_length_in_tokens: 1000
    max_length_in_tokens: 2000
    payload_file: payload_en_1000-2000.jsonl
  - language: en
    min_length_in_tokens: 2000
    max_length_in_tokens: 3000
    payload_file: payload_en_2000-3000.jsonl
  - language: en
    min_length_in_tokens: 3000
    max_length_in_tokens: 4000
    payload_file: payload_en_3000-4000.jsonl
  - language: en
    min_length_in_tokens: 305
    max_length_in_tokens: 3997
    payload_file: payload_en_305-3997.jsonl
  - language: en
    min_length_in_tokens: 1600
    max_length_in_tokens: 5000
    payload_file: payload_en_1600-5000.jsonl

metrics:
  dataset_of_interest: en_2000-3000
  
pricing: pricing.yml
  
inference_parameters:
  ec2_djl:
    do_sample: yes
    temperature: 0.1
    top_p: 0.92
    top_k: 120  
    max_new_tokens: 100

# Model configurations
experiments:
  - name: Mixtral-8x7B-Instruct-v0.1-AWQ
    region: {region}
    model_id: TheBloke/Mixtral-8x7B-Instruct-v0.1-AWQ
    model_version: 
    model_name: Mixtral-8x7B-Instruct-v0.1-AWQ
    ep_name: 'http://127.0.0.1:8080/invocations' 
    instance_type: "g6.48xlarge"
    image_uri: 763104351884.dkr.ecr.{region}.amazonaws.com/djl-inference:0.29.0-lmi11.0.0-cu124
    deploy: yes #setting to yes to run deployment script for ec2
    instance_count: 
    deployment_script: ec2_deploy.py
    # FMBench comes packaged with multiple inference scripts, such as scripts for SageMaker
    # and Bedrock. You can also add your own. This is an example for a rest DJL predictor
    # for a llama3-8b-instruct deployed on ec2
    inference_script: ec2_predictor.py
    # This section defines the settings for Amazon EC2 instances
    ec2:
      #This setting specifies the timeout (in seconds) for loading the model. In this case, the timeout is set to 2400 seconds, which is 40 minutes. 
      # If the model takes longer than 40 minutes to load, the process will time out and fail.
      model_loading_timeout: 2400
    inference_spec:
      # this should match one of the sections in the inference_parameters section above
      parameter_set: ec2_djl
      # how many copies of the model, 1, 2,..max
      # set to 1 in the code if not configured, setting to max means that 
      # the code will determine how many copies can be loaded based on TP and 
      # number of GPU/Neuron devices available
      model_copies: max
      # if you set the model_copies parameter then it is mandatory to set the 
      # tp_degree, shm_size, model_loading_timeout parameters
      tp_degree: 4
      shm_size: 12g
      model_loading_timeout: 2400
    # modify the serving properties to match your model and requirements
    serving.properties: |
      engine=MPI
      option.tensor_parallel_degree=4
      option.max_rolling_batch_size=4
      option.model_id=meta-llama/Meta-Llama-3-8B-Instruct
      option.rolling_batch=lmi-dist
    payload_files:
    - payload_en_1-500.jsonl
    - payload_en_500-1000.jsonl
    - payload_en_1000-2000.jsonl
    - payload_en_2000-3000.jsonl
    - payload_en_3000-3840.jsonl
    concurrency_levels:
    - 1
    - 2
    - 4
    - 6
    - 8
    env:

report:
  latency_budget: 2
  cost_per_10k_txn_budget: 100
  error_rate_budget: 0
  per_inference_request_file: per_inference_request_results.csv
  all_metrics_file: all_metrics.csv
  txn_count_for_showing_cost: 10000
  v_shift_w_single_instance: 0.025
  v_shift_w_gt_one_instance: 0.025  

